#!/bin/bash

# Script de d√©ploiement pour Echo Music Player
# Usage: ./deploy.sh [environment] [version]

set -e

ENVIRONMENT=${1:-production}
VERSION=${2:-latest}
PROJECT_DIR="/opt/echo-music-player"

echo "üöÄ D√©ploiement d'Echo Music Player"
echo "Environnement: $ENVIRONMENT"
echo "Version: $VERSION"

# V√©rifications pr√©alables
if [ ! -f "$PROJECT_DIR/.env.$ENVIRONMENT" ]; then
    echo "‚ùå Fichier .env.$ENVIRONMENT manquant"
    exit 1
fi

# Backup de la base de donn√©es
echo "üì¶ Backup de la base de donn√©es..."
mkdir -p $PROJECT_DIR/backups
docker exec echo-postgres pg_dump -U echo_user echo_production > $PROJECT_DIR/backups/backup_$(date +%Y%m%d_%H%M%S).sql

# Arr√™t gracieux des services
echo "‚èπÔ∏è  Arr√™t des services..."
cd $PROJECT_DIR
docker-compose -f docker-compose.prod.yml down --timeout 30

# Nettoyage des anciennes images
echo "üßπ Nettoyage des anciennes images..."
docker image prune -f
docker volume prune -f

# Mise √† jour du code
echo "üì• R√©cup√©ration du code..."
git fetch --all
git checkout main
git pull origin main

# Variables d'environnement
export $(cat .env.$ENVIRONMENT | xargs)

# Build et d√©marrage des nouveaux services
echo "üî® Build et d√©marrage des services..."
docker-compose -f docker-compose.prod.yml build --no-cache
docker-compose -f docker-compose.prod.yml up -d

# Attendre que les services d√©marrent
echo "‚è≥ Attente du d√©marrage des services..."
sleep 60

# Tests de sant√©
echo "üîç V√©rification de la sant√© des services..."

# Test frontend
if curl -f http://localhost/health > /dev/null 2>&1; then
    echo "‚úÖ Frontend OK"
else
    echo "‚ùå Frontend KO"
    exit 1
fi

# Test backend
if curl -f http://localhost/api/health > /dev/null 2>&1; then
    echo "‚úÖ Backend OK"
else
    echo "‚ùå Backend KO"
    exit 1
fi

# Test base de donn√©es
if docker exec echo-postgres pg_isready -U echo_user -d echo_production > /dev/null 2>&1; then
    echo "‚úÖ Base de donn√©es OK"
else
    echo "‚ùå Base de donn√©es KO"
    exit 1
fi

# Migration de la base de donn√©es
echo "üîÑ Migrations de la base de donn√©es..."
docker exec echo-backend node scripts/migrate.js

# Nettoyage post-d√©ploiement
echo "üßΩ Nettoyage..."
docker system prune -af --volumes

# Logs de d√©ploiement
echo "üìù Logs de d√©ploiement..."
echo "$(date): D√©ploiement $VERSION r√©ussi" >> $PROJECT_DIR/logs/deployment.log

# Notification
if [ ! -z "$SLACK_WEBHOOK" ]; then
    curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"üöÄ Echo Music Player d√©ploy√© avec succ√®s\nEnvironnement: '$ENVIRONMENT'\nVersion: '$VERSION'\nHeure: '$(date)'"}' \
        $SLACK_WEBHOOK
fi

echo "‚úÖ D√©ploiement termin√© avec succ√®s!"
echo "üåê Application disponible sur: https://echo-music.com"
